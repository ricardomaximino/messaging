package com.brasajava.rabbitstreamreactiveone.handler;

import static org.springframework.http.MediaType.APPLICATION_JSON;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.brasajava.rabbitstreamreactiveone.domain.Person;
import com.brasajava.rabbitstreamreactiveone.repository.PersonRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
public class PersonHandler {

	@Autowired
	private PersonRepository repository;

	public Mono<ServerResponse> findAll(ServerRequest request) { 
		Flux<Person> people = repository.findAll();
		return ServerResponse.ok().contentType(APPLICATION_JSON).body(people, Person.class);
	}

	public Mono<ServerResponse> save(ServerRequest request) { 
		Mono<Person> person = request.bodyToMono(Person.class);
		return ServerResponse.ok().build(person.flatMap(p -> {
			p = createPerson(p);
			repository.save(p).subscribe();
			return Mono.empty();
		}));
	}

	public Mono<ServerResponse> findById(ServerRequest request) { 
		return ServerResponse
				.ok()
				.body(repository.findById(request.pathVariable("id")), Person.class);
	}
	
	public Mono<ServerResponse> count(ServerRequest request) { 
		return ServerResponse.ok().body(repository.count(),Long.class);
	}
	
	public Mono<ServerResponse> foreverPerson(ServerRequest request) {
		return ServerResponse
				.ok()
				.contentType(MediaType.TEXT_EVENT_STREAM)
				.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
					return Flux.interval(Duration.ofSeconds(1)).zipWith(repository.findAll(), (a,b) -> b);
				}), Person.class);
	}
	
//	public Mono<ServerResponse> foreverByDate(ServerRequest request) {
//		return request.bodyToMono(LocalDate.class).flatMap(date -> {
//			return ServerResponse
//					.ok()
//					.contentType(MediaType.TEXT_EVENT_STREAM)
//					.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
//						return Flux.interval(Duration.ofSeconds(1)).zipWith(repository.findByCreateDate(date), (a,b) -> b);
//					}), Person.class);
//		});
//	}
	
//	public Mono<ServerResponse> foreverByTime(ServerRequest request) {
//		return request.bodyToMono(LocalTime.class).flatMap(time -> {
//			return ServerResponse
//					.ok()
//					.contentType(MediaType.TEXT_EVENT_STREAM)
//					.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
//						return Flux.interval(Duration.ofSeconds(1)).zipWith(repository.findByCreateDated(time), (a,b) -> b);
//					}), Person.class);
//		});
//	}
	
//	public Mono<ServerResponse> foreverByDateGet(ServerRequest request) {
//		int year = Integer.parseInt(request.pathVariable("year"));
//		int month = Integer.parseInt(request.pathVariable("month"));
//		int day = Integer.parseInt(request.pathVariable("day"));
//		LocalDate date = LocalDate.of(year, month, day);
//		return ServerResponse
//				.ok()
//				.contentType(MediaType.TEXT_EVENT_STREAM)
//				.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
//					return Flux.interval(Duration.ofSeconds(1)).zipWith(repository.findByCreateDate(date), (a,b) -> b);
//				}), Person.class);
	}
	
	
//	public Mono<ServerResponse> foreverByTimeGet(ServerRequest request) {
//		int hour = Integer.parseInt(request.pathVariable("hour"));
//		int minute = Integer.parseInt(request.pathVariable("minute"));
//		LocalTime time = LocalTime.of(hour, minute);
//		return ServerResponse
//				.ok()
//				.contentType(MediaType.TEXT_EVENT_STREAM)
//				.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
//					return Flux.interval(Duration.ofSeconds(1)).zipWith(repository.findByCreateTime(time), (a,b) -> b);
//				}), Person.class);
//	}
	
	
	
	
	
	public Mono<ServerResponse> forever(ServerRequest request) {
		return ServerResponse
				.ok()
				.contentType(MediaType.TEXT_EVENT_STREAM)
				.body(Flux.interval(Duration.ofSeconds(5)).flatMap(f -> {
					return Flux.interval(Duration.ofSeconds(1)).zipWith(Flux.fromStream(Stream.generate(this::createPerson)), (a,b) -> b);
				}), Person.class);
	}
	
	private Person createPerson() {
		Person person = new Person(String.valueOf(Math.random() * 465441621), "Forever Name", "Forever Lastname " + System.currentTimeMillis(), "email@example.com", LocalDateTime.now(), LocalDateTime.now());
		repository.save(person).subscribe();
		return person;
	}
	
	private Person createPerson(Person person) {
		person.setCreateDate(LocalDateTime.now());
		person.setUpdateDate(LocalDateTime.now());
		return person;
	}
}