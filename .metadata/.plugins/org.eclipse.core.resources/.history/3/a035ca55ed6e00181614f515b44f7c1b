package com.brasajava.rabbitstreamreceiverone.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.brasajava.rabbitstreamreceiverone.domain.Chart;
import com.brasajava.rabbitstreamreceiverone.domain.ContactEvent;
import com.brasajava.rabbitstreamreceiverone.repository.ContactEventRepository;

@RestController
@CrossOrigin(origins = "*")
public class ContactEventController {

	@Autowired
	private ContactEventRepository repository;

	@GetMapping("/event")
	public ResponseEntity<List<ContactEvent>> findAll() {
		return new ResponseEntity<>(repository.findAll(), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "created")
	public ResponseEntity<List<ContactEvent>> created() {
		return new ResponseEntity<>(repository.findByType("01"), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "saved")
	public ResponseEntity<List<ContactEvent>> saved() {
		return new ResponseEntity<>(repository.findByType("02"), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "not-saved")
	public ResponseEntity<List<ContactEvent>> notSaved() {
		return new ResponseEntity<>(repository.findByType("03"), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "updated")
	public ResponseEntity<List<ContactEvent>> updated() {
		return new ResponseEntity<>(repository.findByType("04"), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "deleted")
	public ResponseEntity<List<ContactEvent>> deleted() {
		return new ResponseEntity<>(repository.findByType("05"), HttpStatus.OK);
	}

	@GetMapping(value = "/event", params = "json")
	public ResponseEntity<String> chartString() {
		String json = "{\"chart\":{\"type\":\"spline\"},\"title\":{\"text\":\"Solar Employment Growth by Sector, 2010-2016\"},\"subtitle\":{\"text\":\"Source: thesolarfoundation.com\"},\"xAxis\":{\"categories\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]},\"yAxis\":{\"title\":{\"text\":\"Number of Employees\"}},\"legend\":{\"layout\":\"vertical\",\"align\":\"right\",\"verticalAlign\":\"middle\"},\"plotOptions\":{\"series\":{\"label\":{\"connectorAllowed\":false},\"pointStart\":0}},\"series\":[{\"name\":\"Installation\",\"data\":[43934,52503,57177,69658,97031,119931,137133,154175]}],\"responsive\":{\"rules\":[{\"condition\":{\"maxWidth\":500}}]}}";
		return new ResponseEntity<>(json, HttpStatus.OK);
	}
	@GetMapping(value = "/event", params = "chart")
	public ResponseEntity<List<Chart>> chart() {
		List<Chart> series = new ArrayList<>();
		Chart createChart = this.init(new Chart("created"));
		Chart saveChart = this.init(new Chart("saved"));
		Chart notSaveChart = this.init(new Chart("not-saved"));
		Chart updateChart = this.init(new Chart("updated"));
		Chart deleteChart = this.init(new Chart("deleted"));
		series.add(createChart);
		series.add(saveChart);
		series.add(notSaveChart);
		series.add(updateChart);
		series.add(deleteChart);
		Long count = 0L;
		int hour = 0;
		for (ContactEvent event : repository.findAll()) {
			switch (event.getType()) {
			case "01":
				hour = event.getSendTime().getHour();
				count = createChart.getData().get(hour) + 1;
				createChart.getData().add(hour, count);
				break;
			case "02":
				hour = event.getSendTime().getHour();
				count = saveChart.getData().get(hour) + 1;
				saveChart.getData().add(hour, count);
				break;
			case "03":
				hour = event.getSendTime().getHour();
				count = notSaveChart.getData().get(hour) + 1;
				notSaveChart.getData().add(hour, count);
				break;
			case "04":
				hour = event.getSendTime().getHour();
				count = updateChart.getData().get(hour) + 1;
				updateChart.getData().add(hour, count);
				break;
			case "05":
				hour = event.getSendTime().getHour();
				count = deleteChart.getData().get(hour) + 1;
				deleteChart.getData().add(hour, count);
				break;
			}
		}
		return new ResponseEntity<>(series, HttpStatus.OK);
	}
	
	private Chart init(Chart chart) {
		for(int i = 0; i < 24; i++) {
			chart.getData().add(0L);
		}
		return chart;
	}
}
