package com.verisure.vcp.newmicroservice.api.controller;

import java.time.LocalDate;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.verisure.vcp.newmicroservice.api.converter.ProfileConverter;
import com.verisure.vcp.newmicroservice.api.dto.ProfileDTO;
import com.verisure.vcp.newmicroservice.service.ProfileService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Sample controller used as template. <b>Please remove for actual project implementation.</b>
 *
 * @since 1.0.0
 * @author FaaS [faas@securitasdirect.es]
 */
@Slf4j
@RestController
@RequestMapping("/profile")
@Api(value = "Profile API")
public class ProfileController {

    @Autowired
    private ProfileConverter profileConverter;

    @Autowired
    private ProfileService profileService;

    @GetMapping(produces = "application/json")
    @ResponseBody
    @ApiOperation(value = "view the list of ALL profiles", response = ProfileDTO.class)
    public Flux<ProfileDTO> findAll() {
        LOGGER.debug("Trying to retrieve all profiles");
        return profileService.findAll().map(profileConverter::toProfileDTO);

    }
    
    @GetMapping(produces = "application/json", params = "birthday")
    @ResponseBody
    @ApiOperation(value = "view the list of ALL profiles", response = ProfileDTO.class)
    public Flux<ProfileDTO> FindByBirthday(@RequestParam(value = "birthday", required = true) @DateTimeFormat(iso = ISO.DATE) LocalDate date) {
        LOGGER.debug("Trying to retrieve all profiles");
        return profileService.findAll().map(profileConverter::toProfileDTO);

    }


    @PostMapping(consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Create an Profile")
    public Mono<ProfileDTO> create(@Valid @RequestBody ProfileDTO request) {
        LOGGER.debug("Creating an profile: {}", request.toString());
        return profileService.save(profileConverter.toProfile(request)).map(profileConverter::toProfileDTO);
    }
    
    
    @PutMapping(consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Update an Profile")
    public Mono<ProfileDTO> update(@Valid @RequestBody ProfileDTO request) {
        LOGGER.debug("Creating an profile: {}", request.toString());
        return profileService.save(profileConverter.toProfile(request)).map(profileConverter::toProfileDTO);
    }


}
