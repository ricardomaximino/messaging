package com.brasajava.springbootreactivewebsocketone;

import java.time.Duration;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.HandlerMapping;
import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;
import org.springframework.web.reactive.socket.WebSocketHandler;
import org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter;

import reactor.core.publisher.Flux;
import reactor.core.publisher.SynchronousSink;

@SpringBootApplication
public class SpringBootReactiveWebSocketOneApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootReactiveWebSocketOneApplication.class, args);
	}
}

@Configuration
class WebSocketConfig {
	
	@Bean
	public WebSocketHandler wsh() {
		return session -> {
			Flux<Message> mf = Flux.interval(Duration.ofSeconds(2)).zipWith(Flux.create(Consumer<SynchronousSink<Message>>{
				sink -> sink.nex(new Message("JOIN", "Content", "Sender"));
			}, (a,b) -> b));
			
		};
	}
	
	@Bean
	public WebSocketHandlerAdapter wsha() {
		return new WebSocketHandlerAdapter();
	}
	
	@Bean
	public HandlerMapping hm() {
		return new SimpleUrlHandlerMapping();
	}
	
}

class Message {
	private String type;
	private String content;
	private String sender;
	
	
	public Message() {}
	public Message(String type, String content, String sender) {
		this.type = type;
		this.content = content;
		this.sender = sender;
	}
	
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	public String getSender() {
		return sender;
	}
	public void setSender(String sender) {
		this.sender = sender;
	}
	
	
}