package com.verisure.vcp.newmicroservice.api.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.verisure.vcp.newmicroservice.domain.entity.Activity;
import com.verisure.vcp.newmicroservice.domain.entity.Contact;
import com.verisure.vcp.newmicroservice.service.ContactService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Sample controller used as template. <b>Please remove for actual project implementation.</b>
 *
 * @since 1.0.0
 * @author FaaS [faas@securitasdirect.es]
 */
@Slf4j
@RestController
@RequestMapping("/contact")
@Api(value = "Contact - Campaign API")
public class ContactController {
	
	@Autowired
    private ContactService contactService;

    @GetMapping(produces = "application/json")
    @ResponseBody
    @ApiOperation(value = "Search ALL Contacts", response = Contact.class)
    public Flux<Contact> findAll() {
        LOGGER.debug("Search ALL Contact");
        return contactService.findAll();

    }
    
    @GetMapping(value = "/{id}", produces = "application/json")
    @ResponseBody
    @ApiOperation(value = "Search Contact by id", response = Contact.class)
    public Mono<Contact> findById(@PathVariable("id") String id) {
        LOGGER.debug("Searching Contact by id: " + id);
        return contactService.findById(id);

    }


    @PostMapping(consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Create an Contact")
    public Mono<Contact> create(@Valid @RequestBody Contact contact) {
        LOGGER.debug("Creating an Contact: {}", contact.toString());
        return contactService.save(contact);
    }
    
    @PutMapping(consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Update an Contact")
    public Mono<Contact> update(@Valid @RequestBody Contact contact) {
        LOGGER.debug("Updating an Contact: {}", contact.toString());
        return contactService.save(contact);
    }

    @DeleteMapping(value = "/{id}")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Deleted an Contact")
    public Mono<Boolean> delete(@PathVariable("id") String id) {
        LOGGER.debug("Deleting an Contact: " + id);
        return contactService.deleteById(id);
    }
    
    @PostMapping(value = "/{id}/activity", consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Add an Activity to the contact")
    public Mono<Contact> create(@PathVariable("id") String id, @Valid @RequestBody Activity activity) {
        LOGGER.debug("Add an Activity to the contact: {}", activity.toString());
        return contactService.findById(id).flatMap(c -> {
        	c.getActivityList().add(activity);
        	return contactService.save(c);
        });
    }
    
    @DeleteMapping(value = "/{id}/activity/{activityId}", consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Add an Activity to the contact")
    public Mono<Contact> create(@PathVariable("id") String id, @PathVariable("activityId") String activityId, @Valid @RequestBody Activity activity) {
        LOGGER.debug("Add an Activity to the contact: {}", activity.toString());
        contactService.removeActivity(id, activityId);
        /*
        return contactService.findById(id).flatMap(c -> {
        	for(Activity a : c.getActivityList()) {
        		if(a.getId().equals(activityId)) c.getActivityList().remove(a);
        	}
        	return contactService.save(c);
        });
        */
    }
    
}
