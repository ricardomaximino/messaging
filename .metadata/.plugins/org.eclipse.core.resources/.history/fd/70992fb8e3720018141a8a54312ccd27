package com.brasajava.springbootreactivewebsockettwo.controller;

import java.time.LocalDate;
import java.time.LocalTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.brasajava.springbootreactivewebsockettwo.repository.PersonRepository;
import com.brasajava.springbootreactivewebsockettwo.service.domain.Person;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
public class PersonCotroller {
	
	@Autowired
	private PersonRepository repository;
	
	@PostMapping("/person")
	public Mono<Person> save(@RequestBody Person person){
		return repository.save(person);
	}
	
	@DeleteMapping("/person/{id}")
	public Mono<Void> deleteById(@PathVariable("id") String id){
		return repository.deleteById(id);
	}
	
	@GetMapping(value = "/person", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<Person> findAll(){
		return repository.findAll();
	}
	
	@GetMapping(value = "/person", params = "createDate", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<Person> findByCreateDate(@RequestParam( value = "createDate", required = true) LocalDate date){
		return repository.findByCreateDate(date);
	}
	
	@GetMapping(value = "/person", params = "createTime", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<Person> findByCreateTime(@RequestParam( value = "createTime", required = true) LocalTime time){
		return repository.findByCreateTime(time);
	}
	
	@GetMapping(value = "/person", params = "updateDate", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<Person> findByUpdateDate(@RequestParam( value = "updateDate", required = true) LocalDate date){
		return repository.findByCreateDate(date);
	}
	
	@GetMapping(value = "/person", params = "updateTime", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<Person> findByUpdateTime(@RequestParam( value = "updateTime", required = true) LocalTime time){
		return repository.findByCreateTime(time);
	}
}
